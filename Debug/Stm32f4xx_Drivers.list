
Stm32f4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000670  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000834  08000834  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000834  08000834  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000834  08000834  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000834  08000834  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000834  08000834  00010834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000838  08000838  00010838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800083c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  080008a0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080008a0  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000217c  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000059f  00000000  00000000  00022210  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000e0  00000000  00000000  000227b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00022890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002087  00000000  00000000  00022938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000011ac  00000000  00000000  000249bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000093f4  00000000  00000000  00025b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ef5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003b4  00000000  00000000  0002efdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800081c 	.word	0x0800081c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	0800081c 	.word	0x0800081c

08000204 <delay>:

#define USER_LED_PIN 5      // Port A
#define USER_BUTTON  13     // Port C

void delay(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
    for(uint32_t i =0; i < 50000; i++) {}
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800021c:	4293      	cmp	r3, r2
 800021e:	d9f7      	bls.n	8000210 <delay+0xc>
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr

0800022c <InitUserPushButton>:

void InitUserPushButton(GPIO_Handle_t hGPIO, uint8_t PinNumber)
{
 800022c:	b590      	push	{r4, r7, lr}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	463c      	mov	r4, r7
 8000234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    hGPIO.PinConfig.PinNumber = PinNumber;
 8000238:	f897 3020 	ldrb.w	r3, [r7, #32]
 800023c:	723b      	strb	r3, [r7, #8]
    hGPIO.PinConfig.PinMode = MODE_INPUT;
 800023e:	2300      	movs	r3, #0
 8000240:	727b      	strb	r3, [r7, #9]
    hGPIO.PinConfig.PinPuPdControl = RSTR_NONE;
 8000242:	2300      	movs	r3, #0
 8000244:	72fb      	strb	r3, [r7, #11]
    GPIO_SetClock(hGPIO.GPIOx, ENABLE);
 8000246:	783b      	ldrb	r3, [r7, #0]
 8000248:	2101      	movs	r1, #1
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f8b6 	bl	80003bc <GPIO_SetClock>
    GPIO_Init(&hGPIO);
 8000250:	463b      	mov	r3, r7
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f942 	bl	80004dc <GPIO_Init>
}
 8000258:	bf00      	nop
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bd90      	pop	{r4, r7, pc}

08000260 <InitUserLed>:

void InitUserLed(GPIO_Handle_t hGPIO, uint8_t PinNumber)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	463c      	mov	r4, r7
 8000268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    hGPIO.PinConfig.PinNumber = PinNumber;
 800026c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000270:	723b      	strb	r3, [r7, #8]
    hGPIO.PinConfig.PinMode = MODE_OUTPUT;
 8000272:	2301      	movs	r3, #1
 8000274:	727b      	strb	r3, [r7, #9]
    hGPIO.PinConfig.PinSpeed = SPEED_HIGH;
 8000276:	2303      	movs	r3, #3
 8000278:	72bb      	strb	r3, [r7, #10]
    hGPIO.PinConfig.PinPuPdControl = RSTR_NONE;
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]
    hGPIO.PinConfig.PinOPType = TYPE_PUSHPULL;
 800027e:	2300      	movs	r3, #0
 8000280:	733b      	strb	r3, [r7, #12]
    GPIO_SetClock(hGPIO.GPIOx, ENABLE);
 8000282:	783b      	ldrb	r3, [r7, #0]
 8000284:	2101      	movs	r1, #1
 8000286:	4618      	mov	r0, r3
 8000288:	f000 f898 	bl	80003bc <GPIO_SetClock>
    GPIO_Init(&hGPIO);
 800028c:	463b      	mov	r3, r7
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f924 	bl	80004dc <GPIO_Init>
}
 8000294:	bf00      	nop
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	bd90      	pop	{r4, r7, pc}

0800029c <main>:

int main(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b08b      	sub	sp, #44	; 0x2c
 80002a0:	af02      	add	r7, sp, #8
    GPIO_Handle_t hGPIOA = *GetGPIOPortHandler(GPIOA);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 f8b6 	bl	8000414 <GetGPIOPortHandler>
 80002a8:	4603      	mov	r3, r0
 80002aa:	f107 0410 	add.w	r4, r7, #16
 80002ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    InitUserLed(hGPIOA, USER_LED_PIN);
 80002b4:	2305      	movs	r3, #5
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	f107 0310 	add.w	r3, r7, #16
 80002bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002be:	f7ff ffcf 	bl	8000260 <InitUserLed>

    GPIO_Handle_t hGPIOC = *GetGPIOPortHandler(GPIOC);
 80002c2:	2002      	movs	r0, #2
 80002c4:	f000 f8a6 	bl	8000414 <GetGPIOPortHandler>
 80002c8:	4603      	mov	r3, r0
 80002ca:	463c      	mov	r4, r7
 80002cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    InitUserPushButton(hGPIOC, USER_BUTTON); // Push button is connected to PC13
 80002d2:	230d      	movs	r3, #13
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	463b      	mov	r3, r7
 80002d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002da:	f7ff ffa7 	bl	800022c <InitUserPushButton>

    while(1)
    {
        if (GPIO_PinRead(&hGPIOC, USER_BUTTON) == OFF)
 80002de:	463b      	mov	r3, r7
 80002e0:	210d      	movs	r1, #13
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f9a0 	bl	8000628 <GPIO_PinRead>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d108      	bne.n	8000300 <main+0x64>
        {
            GPIO_TogglePin(&hGPIOA, USER_LED_PIN);
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	2105      	movs	r1, #5
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f9db 	bl	80006b0 <GPIO_TogglePin>
            delay();
 80002fa:	f7ff ff83 	bl	8000204 <delay>
 80002fe:	e7ee      	b.n	80002de <main+0x42>
        }
        else
        {
            GPIO_PinWrite(&hGPIOA, USER_LED_PIN, OFF);
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	2200      	movs	r2, #0
 8000306:	2105      	movs	r1, #5
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f9a3 	bl	8000654 <GPIO_PinWrite>
        if (GPIO_PinRead(&hGPIOC, USER_BUTTON) == OFF)
 800030e:	e7e6      	b.n	80002de <main+0x42>

08000310 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <_sbrk+0x50>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d102      	bne.n	8000326 <_sbrk+0x16>
		heap_end = &end;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <_sbrk+0x50>)
 8000322:	4a10      	ldr	r2, [pc, #64]	; (8000364 <_sbrk+0x54>)
 8000324:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <_sbrk+0x50>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <_sbrk+0x50>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4413      	add	r3, r2
 8000334:	466a      	mov	r2, sp
 8000336:	4293      	cmp	r3, r2
 8000338:	d907      	bls.n	800034a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800033a:	f000 f9d1 	bl	80006e0 <__errno>
 800033e:	4602      	mov	r2, r0
 8000340:	230c      	movs	r3, #12
 8000342:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000344:	f04f 33ff 	mov.w	r3, #4294967295
 8000348:	e006      	b.n	8000358 <_sbrk+0x48>
	}

	heap_end += incr;
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <_sbrk+0x50>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4413      	add	r3, r2
 8000352:	4a03      	ldr	r2, [pc, #12]	; (8000360 <_sbrk+0x50>)
 8000354:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000356:	68fb      	ldr	r3, [r7, #12]
}
 8000358:	4618      	mov	r0, r3
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000080 	.word	0x20000080
 8000364:	20000090 	.word	0x20000090

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490e      	ldr	r1, [pc, #56]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0b      	ldr	r4, [pc, #44]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000392:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f9a9 	bl	80006ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff7f 	bl	800029c <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80003ac:	0800083c 	.word	0x0800083c
  ldr r2, =_sbss
 80003b0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80003b4:	20000090 	.word	0x20000090

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <GPIO_SetClock>:
#include "stm32f446xx_gpio_driver.h"

void GPIO_SetClock(uint8_t GPIOx, uint8_t Status)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	460a      	mov	r2, r1
 80003c6:	71fb      	strb	r3, [r7, #7]
 80003c8:	4613      	mov	r3, r2
 80003ca:	71bb      	strb	r3, [r7, #6]
    if (Status == ENABLE) {
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d10a      	bne.n	80003e8 <GPIO_SetClock+0x2c>
        RCC->AHB1ENR |= (1 << GPIOx);
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <GPIO_SetClock+0x54>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	79fa      	ldrb	r2, [r7, #7]
 80003d8:	2101      	movs	r1, #1
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <GPIO_SetClock+0x54>)
 80003e2:	430b      	orrs	r3, r1
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
    }
    else if (Status == DISABLE) {
        RCC->AHB1ENR &= ~(1 << GPIOx);
    }
}
 80003e6:	e00d      	b.n	8000404 <GPIO_SetClock+0x48>
    else if (Status == DISABLE) {
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d10a      	bne.n	8000404 <GPIO_SetClock+0x48>
        RCC->AHB1ENR &= ~(1 << GPIOx);
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <GPIO_SetClock+0x54>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	2101      	movs	r1, #1
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a04      	ldr	r2, [pc, #16]	; (8000410 <GPIO_SetClock+0x54>)
 8000400:	400b      	ands	r3, r1
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40023800 	.word	0x40023800

08000414 <GetGPIOPortHandler>:

GPIO_Handle_t* GetGPIOPortHandler(uint8_t GPIOx)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
    GPIO_Handle_t *Handle = (GPIO_Handle_t *)malloc(sizeof(GPIO_Handle_t));
 800041e:	2010      	movs	r0, #16
 8000420:	f000 f988 	bl	8000734 <malloc>
 8000424:	4603      	mov	r3, r0
 8000426:	60fb      	str	r3, [r7, #12]
    Handle->GPIOx = GPIOx;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	79fa      	ldrb	r2, [r7, #7]
 800042c:	701a      	strb	r2, [r3, #0]
    Handle->PinConfig.PinNumber = -1;
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	22ff      	movs	r2, #255	; 0xff
 8000432:	721a      	strb	r2, [r3, #8]
    Handle->PinConfig.PinMode = MODE_INPUT;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	2200      	movs	r2, #0
 8000438:	725a      	strb	r2, [r3, #9]
    Handle->PinConfig.PinSpeed = SPEED_LOW;
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2200      	movs	r2, #0
 800043e:	729a      	strb	r2, [r3, #10]
    Handle->PinConfig.PinPuPdControl = RSTR_NONE;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	2200      	movs	r2, #0
 8000444:	72da      	strb	r2, [r3, #11]
    Handle->PinConfig.PinOPType = TYPE_OPENDRAIN;
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	2201      	movs	r2, #1
 800044a:	731a      	strb	r2, [r3, #12]
    Handle->PinConfig.PinAltFuncMode = AF0;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	2200      	movs	r2, #0
 8000450:	735a      	strb	r2, [r3, #13]

    switch (GPIOx)
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b06      	cmp	r3, #6
 8000456:	d82d      	bhi.n	80004b4 <GetGPIOPortHandler+0xa0>
 8000458:	a201      	add	r2, pc, #4	; (adr r2, 8000460 <GetGPIOPortHandler+0x4c>)
 800045a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800045e:	bf00      	nop
 8000460:	0800047d 	.word	0x0800047d
 8000464:	08000485 	.word	0x08000485
 8000468:	0800048d 	.word	0x0800048d
 800046c:	08000495 	.word	0x08000495
 8000470:	0800049d 	.word	0x0800049d
 8000474:	080004a5 	.word	0x080004a5
 8000478:	080004ad 	.word	0x080004ad
    {
        case GPIOA:
            Handle->pGPIO = GPIOA_REG;
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <GetGPIOPortHandler+0xac>)
 8000480:	605a      	str	r2, [r3, #4]
            break;
 8000482:	e017      	b.n	80004b4 <GetGPIOPortHandler+0xa0>
        case GPIOB:
            Handle->pGPIO = GPIOB_REG;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <GetGPIOPortHandler+0xb0>)
 8000488:	605a      	str	r2, [r3, #4]
            break;
 800048a:	e013      	b.n	80004b4 <GetGPIOPortHandler+0xa0>
        case GPIOC:
            Handle->pGPIO = GPIOC_REG;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <GetGPIOPortHandler+0xb4>)
 8000490:	605a      	str	r2, [r3, #4]
            break;
 8000492:	e00f      	b.n	80004b4 <GetGPIOPortHandler+0xa0>
        case GPIOD:
            Handle->pGPIO = GPIOD_REG;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <GetGPIOPortHandler+0xb8>)
 8000498:	605a      	str	r2, [r3, #4]
            break;
 800049a:	e00b      	b.n	80004b4 <GetGPIOPortHandler+0xa0>
        case GPIOE:
            Handle->pGPIO = GPIOE_REG;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <GetGPIOPortHandler+0xbc>)
 80004a0:	605a      	str	r2, [r3, #4]
            break;
 80004a2:	e007      	b.n	80004b4 <GetGPIOPortHandler+0xa0>
        case GPIOF:
            Handle->pGPIO = GPIOF_REG;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <GetGPIOPortHandler+0xc0>)
 80004a8:	605a      	str	r2, [r3, #4]
            break;
 80004aa:	e003      	b.n	80004b4 <GetGPIOPortHandler+0xa0>
        case GPIOG:
            Handle->pGPIO = GPIOG_REG;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <GetGPIOPortHandler+0xc4>)
 80004b0:	605a      	str	r2, [r3, #4]
            break;
 80004b2:	bf00      	nop
    }
    return Handle;
 80004b4:	68fb      	ldr	r3, [r7, #12]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40020000 	.word	0x40020000
 80004c4:	40020400 	.word	0x40020400
 80004c8:	40020800 	.word	0x40020800
 80004cc:	40020c00 	.word	0x40020c00
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40021400 	.word	0x40021400
 80004d8:	40021800 	.word	0x40021800

080004dc <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *hGPIO)
{
 80004dc:	b490      	push	{r4, r7}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    GPIO_Handle_t GPIO = *hGPIO;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f107 040c 	add.w	r4, r7, #12
 80004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t pNum = hGPIO->PinConfig.PinNumber;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	7a1b      	ldrb	r3, [r3, #8]
 80004f4:	77fb      	strb	r3, [r7, #31]

    // Set the pin mode
    if (GPIO.PinConfig.PinMode <= MODE_ANLG) {
 80004f6:	7d7b      	ldrb	r3, [r7, #21]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d816      	bhi.n	800052a <GPIO_Init+0x4e>
        // Non-interrupt mode
        GPIO.pGPIO->MODER &= ~(0x3 << pNum);
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	7ffb      	ldrb	r3, [r7, #31]
 8000502:	2103      	movs	r1, #3
 8000504:	fa01 f303 	lsl.w	r3, r1, r3
 8000508:	43db      	mvns	r3, r3
 800050a:	4619      	mov	r1, r3
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	400a      	ands	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
        GPIO.pGPIO->MODER |= GPIO.PinConfig.PinMode << (2 * pNum);
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	7d7b      	ldrb	r3, [r7, #21]
 8000518:	4619      	mov	r1, r3
 800051a:	7ffb      	ldrb	r3, [r7, #31]
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	4619      	mov	r1, r3
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
    else {
        // Interrupt mode
    }

    // Set slew rate
    GPIO.pGPIO->OSPEEDER &= ~(0x3 << pNum);
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	7ffb      	ldrb	r3, [r7, #31]
 8000530:	2103      	movs	r1, #3
 8000532:	fa01 f303 	lsl.w	r3, r1, r3
 8000536:	43db      	mvns	r3, r3
 8000538:	4619      	mov	r1, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	400a      	ands	r2, r1
 800053e:	609a      	str	r2, [r3, #8]
    GPIO.pGPIO->OSPEEDER |= hGPIO->PinConfig.PinSpeed << (2 * pNum);
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	7a9b      	ldrb	r3, [r3, #10]
 8000548:	4619      	mov	r1, r3
 800054a:	7ffb      	ldrb	r3, [r7, #31]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	4619      	mov	r1, r3
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	430a      	orrs	r2, r1
 8000558:	609a      	str	r2, [r3, #8]

    // Set Pull-up/Pull-down
    GPIO.pGPIO->PUPDR &= ~(0x3 << pNum);
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	68da      	ldr	r2, [r3, #12]
 800055e:	7ffb      	ldrb	r3, [r7, #31]
 8000560:	2103      	movs	r1, #3
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	43db      	mvns	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	400a      	ands	r2, r1
 800056e:	60da      	str	r2, [r3, #12]
    GPIO.pGPIO->PUPDR |= hGPIO->PinConfig.PinPuPdControl << (2 * pNum);
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7adb      	ldrb	r3, [r3, #11]
 8000578:	4619      	mov	r1, r3
 800057a:	7ffb      	ldrb	r3, [r7, #31]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	4619      	mov	r1, r3
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	430a      	orrs	r2, r1
 8000588:	60da      	str	r2, [r3, #12]

    // Set output type
    GPIO.pGPIO->OTYPER &= ~(1 << pNum);
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	685a      	ldr	r2, [r3, #4]
 800058e:	7ffb      	ldrb	r3, [r7, #31]
 8000590:	2101      	movs	r1, #1
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	43db      	mvns	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	400a      	ands	r2, r1
 800059e:	605a      	str	r2, [r3, #4]
    GPIO.pGPIO->OTYPER |= hGPIO->PinConfig.PinOPType << pNum;
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	7b1b      	ldrb	r3, [r3, #12]
 80005a8:	4619      	mov	r1, r3
 80005aa:	7ffb      	ldrb	r3, [r7, #31]
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	430a      	orrs	r2, r1
 80005b6:	605a      	str	r2, [r3, #4]

    // Set alternate functionality
    if (GPIO.PinConfig.PinMode == MODE_ALTFN) {
 80005b8:	7d7b      	ldrb	r3, [r7, #21]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d12f      	bne.n	800061e <GPIO_Init+0x142>
        // GPIOx_AFRL is used for pins 0-7, GPIOx_AFRH is used for pins 8-15
        if (pNum < 8)
 80005be:	7ffb      	ldrb	r3, [r7, #31]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d816      	bhi.n	80005f2 <GPIO_Init+0x116>
        {
            GPIO.pGPIO->AFRL &= ~(0xF << pNum);
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	6a1a      	ldr	r2, [r3, #32]
 80005c8:	7ffb      	ldrb	r3, [r7, #31]
 80005ca:	210f      	movs	r1, #15
 80005cc:	fa01 f303 	lsl.w	r3, r1, r3
 80005d0:	43db      	mvns	r3, r3
 80005d2:	4619      	mov	r1, r3
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	400a      	ands	r2, r1
 80005d8:	621a      	str	r2, [r3, #32]
            GPIO.pGPIO->AFRL |= GPIO.PinConfig.PinAltFuncMode << pNum;
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	6a1a      	ldr	r2, [r3, #32]
 80005de:	7e7b      	ldrb	r3, [r7, #25]
 80005e0:	4619      	mov	r1, r3
 80005e2:	7ffb      	ldrb	r3, [r7, #31]
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	4619      	mov	r1, r3
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	430a      	orrs	r2, r1
 80005ee:	621a      	str	r2, [r3, #32]
        {
            GPIO.pGPIO->AFRH &= ~(0xF << pNum);
            GPIO.pGPIO->AFRH |= GPIO.PinConfig.PinAltFuncMode << pNum;
        }
    }
}
 80005f0:	e015      	b.n	800061e <GPIO_Init+0x142>
            GPIO.pGPIO->AFRH &= ~(0xF << pNum);
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005f6:	7ffb      	ldrb	r3, [r7, #31]
 80005f8:	210f      	movs	r1, #15
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	43db      	mvns	r3, r3
 8000600:	4619      	mov	r1, r3
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	400a      	ands	r2, r1
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
            GPIO.pGPIO->AFRH |= GPIO.PinConfig.PinAltFuncMode << pNum;
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800060c:	7e7b      	ldrb	r3, [r7, #25]
 800060e:	4619      	mov	r1, r3
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	4619      	mov	r1, r3
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	430a      	orrs	r2, r1
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bc90      	pop	{r4, r7}
 8000626:	4770      	bx	lr

08000628 <GPIO_PinRead>:
    RCC->AHB1RSTR |= (1 << GPIOx);
    RCC->AHB1RSTR &= ~(1 << GPIOx);
}

uint8_t GPIO_PinRead(GPIO_Handle_t *hGPIO, uint8_t PinNumber)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
    return (uint8_t)((hGPIO->pGPIO->IDR >> PinNumber) & (0x00000001));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	691a      	ldr	r2, [r3, #16]
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	fa22 f303 	lsr.w	r3, r2, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <GPIO_PinWrite>:
{
    return (uint16_t)(hGPIO->pGPIO->IDR);
}

void GPIO_PinWrite(GPIO_Handle_t *hGPIO, uint8_t PinNumber, uint8_t Value)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
 8000660:	4613      	mov	r3, r2
 8000662:	70bb      	strb	r3, [r7, #2]
    if (Value == PIN_SET) {
 8000664:	78bb      	ldrb	r3, [r7, #2]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d10c      	bne.n	8000684 <GPIO_PinWrite+0x30>
        hGPIO->pGPIO->ODR |= (1 << PinNumber);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	2101      	movs	r1, #1
 8000674:	fa01 f303 	lsl.w	r3, r1, r3
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	430a      	orrs	r2, r1
 8000680:	615a      	str	r2, [r3, #20]
    }
    else if (Value == PIN_CLEAR) {
        hGPIO->pGPIO->ODR &= ~(1 << PinNumber);
    }
}
 8000682:	e00f      	b.n	80006a4 <GPIO_PinWrite+0x50>
    else if (Value == PIN_CLEAR) {
 8000684:	78bb      	ldrb	r3, [r7, #2]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10c      	bne.n	80006a4 <GPIO_PinWrite+0x50>
        hGPIO->pGPIO->ODR &= ~(1 << PinNumber);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2101      	movs	r1, #1
 8000694:	fa01 f303 	lsl.w	r3, r1, r3
 8000698:	43db      	mvns	r3, r3
 800069a:	4619      	mov	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	400a      	ands	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <GPIO_TogglePin>:
{
    hGPIO->pGPIO->ODR = Value;
}

void GPIO_TogglePin(GPIO_Handle_t *hGPIO, uint8_t PinNumber)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
    hGPIO->pGPIO->ODR ^= (1 << PinNumber);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	2101      	movs	r1, #1
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	404a      	eors	r2, r1
 80006d2:	615a      	str	r2, [r3, #20]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <__errno>:
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <__errno+0x8>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000

080006ec <__libc_init_array>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	4e0d      	ldr	r6, [pc, #52]	; (8000724 <__libc_init_array+0x38>)
 80006f0:	4c0d      	ldr	r4, [pc, #52]	; (8000728 <__libc_init_array+0x3c>)
 80006f2:	1ba4      	subs	r4, r4, r6
 80006f4:	10a4      	asrs	r4, r4, #2
 80006f6:	2500      	movs	r5, #0
 80006f8:	42a5      	cmp	r5, r4
 80006fa:	d109      	bne.n	8000710 <__libc_init_array+0x24>
 80006fc:	4e0b      	ldr	r6, [pc, #44]	; (800072c <__libc_init_array+0x40>)
 80006fe:	4c0c      	ldr	r4, [pc, #48]	; (8000730 <__libc_init_array+0x44>)
 8000700:	f000 f88c 	bl	800081c <_init>
 8000704:	1ba4      	subs	r4, r4, r6
 8000706:	10a4      	asrs	r4, r4, #2
 8000708:	2500      	movs	r5, #0
 800070a:	42a5      	cmp	r5, r4
 800070c:	d105      	bne.n	800071a <__libc_init_array+0x2e>
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000714:	4798      	blx	r3
 8000716:	3501      	adds	r5, #1
 8000718:	e7ee      	b.n	80006f8 <__libc_init_array+0xc>
 800071a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800071e:	4798      	blx	r3
 8000720:	3501      	adds	r5, #1
 8000722:	e7f2      	b.n	800070a <__libc_init_array+0x1e>
 8000724:	08000834 	.word	0x08000834
 8000728:	08000834 	.word	0x08000834
 800072c:	08000834 	.word	0x08000834
 8000730:	08000838 	.word	0x08000838

08000734 <malloc>:
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <malloc+0xc>)
 8000736:	4601      	mov	r1, r0
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	f000 b803 	b.w	8000744 <_malloc_r>
 800073e:	bf00      	nop
 8000740:	20000000 	.word	0x20000000

08000744 <_malloc_r>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	1ccd      	adds	r5, r1, #3
 8000748:	f025 0503 	bic.w	r5, r5, #3
 800074c:	3508      	adds	r5, #8
 800074e:	2d0c      	cmp	r5, #12
 8000750:	bf38      	it	cc
 8000752:	250c      	movcc	r5, #12
 8000754:	2d00      	cmp	r5, #0
 8000756:	4606      	mov	r6, r0
 8000758:	db01      	blt.n	800075e <_malloc_r+0x1a>
 800075a:	42a9      	cmp	r1, r5
 800075c:	d903      	bls.n	8000766 <_malloc_r+0x22>
 800075e:	230c      	movs	r3, #12
 8000760:	6033      	str	r3, [r6, #0]
 8000762:	2000      	movs	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f000 f857 	bl	8000818 <__malloc_lock>
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <_malloc_r+0xac>)
 800076c:	6814      	ldr	r4, [r2, #0]
 800076e:	4621      	mov	r1, r4
 8000770:	b991      	cbnz	r1, 8000798 <_malloc_r+0x54>
 8000772:	4c20      	ldr	r4, [pc, #128]	; (80007f4 <_malloc_r+0xb0>)
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	b91b      	cbnz	r3, 8000780 <_malloc_r+0x3c>
 8000778:	4630      	mov	r0, r6
 800077a:	f000 f83d 	bl	80007f8 <_sbrk_r>
 800077e:	6020      	str	r0, [r4, #0]
 8000780:	4629      	mov	r1, r5
 8000782:	4630      	mov	r0, r6
 8000784:	f000 f838 	bl	80007f8 <_sbrk_r>
 8000788:	1c43      	adds	r3, r0, #1
 800078a:	d124      	bne.n	80007d6 <_malloc_r+0x92>
 800078c:	230c      	movs	r3, #12
 800078e:	6033      	str	r3, [r6, #0]
 8000790:	4630      	mov	r0, r6
 8000792:	f000 f842 	bl	800081a <__malloc_unlock>
 8000796:	e7e4      	b.n	8000762 <_malloc_r+0x1e>
 8000798:	680b      	ldr	r3, [r1, #0]
 800079a:	1b5b      	subs	r3, r3, r5
 800079c:	d418      	bmi.n	80007d0 <_malloc_r+0x8c>
 800079e:	2b0b      	cmp	r3, #11
 80007a0:	d90f      	bls.n	80007c2 <_malloc_r+0x7e>
 80007a2:	600b      	str	r3, [r1, #0]
 80007a4:	50cd      	str	r5, [r1, r3]
 80007a6:	18cc      	adds	r4, r1, r3
 80007a8:	4630      	mov	r0, r6
 80007aa:	f000 f836 	bl	800081a <__malloc_unlock>
 80007ae:	f104 000b 	add.w	r0, r4, #11
 80007b2:	1d23      	adds	r3, r4, #4
 80007b4:	f020 0007 	bic.w	r0, r0, #7
 80007b8:	1ac3      	subs	r3, r0, r3
 80007ba:	d0d3      	beq.n	8000764 <_malloc_r+0x20>
 80007bc:	425a      	negs	r2, r3
 80007be:	50e2      	str	r2, [r4, r3]
 80007c0:	e7d0      	b.n	8000764 <_malloc_r+0x20>
 80007c2:	428c      	cmp	r4, r1
 80007c4:	684b      	ldr	r3, [r1, #4]
 80007c6:	bf16      	itet	ne
 80007c8:	6063      	strne	r3, [r4, #4]
 80007ca:	6013      	streq	r3, [r2, #0]
 80007cc:	460c      	movne	r4, r1
 80007ce:	e7eb      	b.n	80007a8 <_malloc_r+0x64>
 80007d0:	460c      	mov	r4, r1
 80007d2:	6849      	ldr	r1, [r1, #4]
 80007d4:	e7cc      	b.n	8000770 <_malloc_r+0x2c>
 80007d6:	1cc4      	adds	r4, r0, #3
 80007d8:	f024 0403 	bic.w	r4, r4, #3
 80007dc:	42a0      	cmp	r0, r4
 80007de:	d005      	beq.n	80007ec <_malloc_r+0xa8>
 80007e0:	1a21      	subs	r1, r4, r0
 80007e2:	4630      	mov	r0, r6
 80007e4:	f000 f808 	bl	80007f8 <_sbrk_r>
 80007e8:	3001      	adds	r0, #1
 80007ea:	d0cf      	beq.n	800078c <_malloc_r+0x48>
 80007ec:	6025      	str	r5, [r4, #0]
 80007ee:	e7db      	b.n	80007a8 <_malloc_r+0x64>
 80007f0:	20000084 	.word	0x20000084
 80007f4:	20000088 	.word	0x20000088

080007f8 <_sbrk_r>:
 80007f8:	b538      	push	{r3, r4, r5, lr}
 80007fa:	4c06      	ldr	r4, [pc, #24]	; (8000814 <_sbrk_r+0x1c>)
 80007fc:	2300      	movs	r3, #0
 80007fe:	4605      	mov	r5, r0
 8000800:	4608      	mov	r0, r1
 8000802:	6023      	str	r3, [r4, #0]
 8000804:	f7ff fd84 	bl	8000310 <_sbrk>
 8000808:	1c43      	adds	r3, r0, #1
 800080a:	d102      	bne.n	8000812 <_sbrk_r+0x1a>
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	b103      	cbz	r3, 8000812 <_sbrk_r+0x1a>
 8000810:	602b      	str	r3, [r5, #0]
 8000812:	bd38      	pop	{r3, r4, r5, pc}
 8000814:	2000008c 	.word	0x2000008c

08000818 <__malloc_lock>:
 8000818:	4770      	bx	lr

0800081a <__malloc_unlock>:
 800081a:	4770      	bx	lr

0800081c <_init>:
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081e:	bf00      	nop
 8000820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000822:	bc08      	pop	{r3}
 8000824:	469e      	mov	lr, r3
 8000826:	4770      	bx	lr

08000828 <_fini>:
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082a:	bf00      	nop
 800082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082e:	bc08      	pop	{r3}
 8000830:	469e      	mov	lr, r3
 8000832:	4770      	bx	lr
